% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/parse-test-output.R
\name{parse_golang_test_json}
\alias{parse_golang_test_json}
\title{Parse Go test output}
\usage{
parse_golang_test_json(test_file, roll_up_ids = TRUE)
}
\arguments{
\item{test_file}{Path to a \code{.json} file containing the output from \verb{go test --json}}

\item{roll_up_ids}{If \code{TRUE}, the default, will roll up any duplicated
(non-NA) ID's so that they are unique and the passed/failed count reflects
the total sums for a tests with a given ID. If \code{FALSE}, will leave
duplicated Test ID's as is. Note: leaving this \code{FALSE} may cause strange
outputs for subtests.}
}
\value{
A tibble formatted according to \code{mrgvalidate::input_formats}
}
\description{
Parses output of \verb{go test --json} into a tibble for \code{mrgvalidate} to consume.
}
\details{
\itemize{
\item Any tests \emph{without} Test Id's (correctly formatted \emph{in brackets}) will be thrown out.
\item All tests and subtests with the same Test Id will be rolled up to a single
row in the output tibble. The \verb{passed,failed} counts will reflect the number
of tests/subtests that were rolled up this way. The test names for a set of
rolled up ID's must share a common prefix, which will be used as the new test
name. Any trailing spaces, slashes, colons, or underscores will be removed
from the extracted prefix.
\item Any test with \emph{more than one Test Id} will have only the first Test Id
extracted. Any subsequent Test Id's for that test will be ignored. Generally,
the first Id will be the \emph{least} specific, since subsequent Id's will likely
have been added as part of subtests. Keep this in mind when adding Testd Id's
in your Go test code.
}
}
\seealso{
\code{mrgvalidate::input_formats}, \code{mrgvalidate::create_validation_docs()}
}
